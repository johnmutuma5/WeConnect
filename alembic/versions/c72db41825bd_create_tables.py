"""Create tables

Revision ID: c72db41825bd
Revises:
Create Date: 2018-04-03 04:07:38.898350

"""
from alembic import op
import sqlalchemy as sa
from app.v2.models import Base



# revision identifiers, used by Alembic.
revision = 'c72db41825bd'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(sa.schema.CreateSequence(sa.Sequence('user_id_seq', start=1000)))
    op.create_table('users',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('user_id_seq')"), nullable=False),
    sa.Column('mobile', sa.String(length=12), nullable=False),
    sa.Column('username', sa.String(length=63), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=63), nullable=False),
    sa.Column('last_name', sa.String(length=63), nullable=False),
    sa.Column('gender', sa.Enum('Male', 'Female', name='gender_type'), nullable=False),
    sa.Column('email', sa.String(length=127), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.execute(sa.schema.CreateSequence(sa.Sequence('business_id_seq', start=1000)))
    op.create_table('business',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('business_id_seq')"), nullable=False),
    sa.Column('mobile', sa.String(length=12), nullable=False),
    sa.Column('name', sa.String(length=63), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('location', sa.String(length=127), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='FK_business_user_id', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.execute(sa.schema.CreateSequence(sa.Sequence('token_id_seq', start=1)))
    op.create_table('token',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('token_id_seq')"), nullable=False),
    sa.Column('bearer_name', sa.String(length=63), nullable=False),
    sa.Column('token_string', sa.String(length=98), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['bearer_name'], ['users.username'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('bearer_name'),
    sa.UniqueConstraint('token_string')
    )
    op.execute(sa.schema.CreateSequence(sa.Sequence('rev_id_seq', start=1)))
    op.create_table('review',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('rev_id_seq')"), nullable=False),
    sa.Column('heading', sa.String(length=63), nullable=False),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.Column('business_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['business_id'], ['business.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('review')
    op.drop_table('token')
    op.drop_table('business')
    op.drop_table('users')
    # drop sequences
    # op.execute('''DROP SEQUENCE rev_id_seq, token_id_seq, user_id_seq, business_id_seq''')
    sa.Sequence('rev_id_seq').drop(bind=op.get_bind())
    sa.Sequence('token_id_seq').drop(bind=op.get_bind())
    sa.Sequence('user_id_seq').drop(bind=op.get_bind())
    sa.Sequence('business_id_seq').drop(bind=op.get_bind())
    # drop custon types
    # op.execute('''DROP TYPE gender_type''')
    for table in Base.metadata.tables.values():
        for col in table.c:
            if isinstance(col.type, sa.Enum):
                sa.Enum(name=col.type.name).drop(op.get_bind())

    # Base.metadata.drop_all (bind=op.get_bind()) # can be used too for this downgrade
    # ### end Alembic commands ###
